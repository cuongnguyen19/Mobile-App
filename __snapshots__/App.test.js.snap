// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> renders without crash 1`] = `ShallowWrapper {}`;

exports[`<AppButton /> renders unchanged 1`] = `
<View
  accessible={true}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "borderRadius": 20,
          "bottom": 50,
          "justifyContent": "center",
          "padding": 15,
          "width": "100%",
        },
        undefined,
        Object {
          "backgroundColor": "#4e5c50",
        },
      ]
    }
  >
    <Text
      style={
        Array [
          Object {
            "color": "#000",
            "fontSize": 15,
            "fontWeight": "bold",
            "textTransform": "uppercase",
          },
          undefined,
        ]
      }
    >
       
    </Text>
  </View>
</View>
`;

exports[`<AppCard /> renders unchanged 1`] = `
<View
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#f2eadf",
        "borderRadius": 30,
        "marginTop": 25,
        "overflow": "hidden",
      },
      undefined,
    ]
  }
>
  <Image
    source={
      Object {
        "uri": undefined,
      }
    }
    style={
      Object {
        "height": 200,
        "width": "100%",
      }
    }
  />
  <Text
    style={
      Array [
        Object {
          "fontFamily": "Avenir-Roman",
          "fontSize": 20,
        },
        Object {
          "fontSize": 25,
          "fontWeight": "bold",
        },
      ]
    }
  >
     
     
     - 
     
  </Text>
  <Text
    style={
      Array [
        Object {
          "fontFamily": "Avenir-Roman",
          "fontSize": 20,
        },
        Object {
          "fontSize": 18,
        },
      ]
    }
  >
     
     
     
  </Text>
</View>
`;

exports[`<AppIcon /> renders unchanged 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": undefined,
      "borderRadius": 20,
      "height": 40,
      "justifyContent": "center",
      "width": 40,
    }
  }
>
  <Text />
</View>
`;

exports[`<AppListItem /> renders unchanged 1`] = `
<View
  collapsable={false}
  forwardedRef={[Function]}
  onGestureHandlerEvent={[Function]}
  onGestureHandlerStateChange={[Function]}
  onLayout={[Function]}
  style={
    Object {
      "overflow": "hidden",
    }
  }
>
  <View
    collapsable={false}
    forwardedRef={[Function]}
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    pointerEvents="auto"
    style={
      Object {
        "transform": Array [
          Object {
            "translateX": -0,
          },
        ],
      }
    }
  >
    <View
      accessible={true}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <View />
    </View>
  </View>
</View>
`;

exports[`<AppPicker /> renders unchanged 1`] = `
Array [
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "#e0e0eb",
        "borderRadius": 25,
        "flexDirection": "row",
        "marginVertical": 20,
        "padding": 10,
        "width": "100%",
      }
    }
  >
    <Text
      style={
        Array [
          Object {
            "fontFamily": "Avenir-Roman",
            "fontSize": 20,
          },
          Object {
            "flex": 1,
          },
        ]
      }
    >
       
       
       
    </Text>
    <Text
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": undefined,
            "fontSize": 24,
          },
          undefined,
          Object {
            "fontFamily": "material-community",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      ó°…€
    </Text>
  </View>,
  <Modal
    animationType="slide"
    hardwareAccelerated={false}
    visible={false}
  >
    <RCTSafeAreaView
      emulateUnlessSupported={true}
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Close
          </Text>
        </View>
      </View>
      <RCTScrollView
        disableVirtualization={false}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        stickyHeaderIndices={Array []}
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <View />
      </RCTScrollView>
    </RCTSafeAreaView>
  </Modal>,
]
`;

exports[`<AppPickerItem /> renders unchanged 1`] = `
<View
  accessible={true}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignItems": "center",
      "opacity": 1,
      "paddingHorizontal": 10,
      "paddingVertical": 10,
      "width": "33%",
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "fontFamily": "Avenir-Roman",
          "fontSize": 20,
        },
        undefined,
      ]
    }
  >
     
     
     
  </Text>
</View>
`;

exports[`<AppScreen /> renders unchanged 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
/>
`;

exports[`<AppText /> renders unchanged 1`] = `
<Text
  style={
    Array [
      Object {
        "fontFamily": "Avenir-Roman",
        "fontSize": 20,
      },
      undefined,
    ]
  }
>
   
</Text>
`;

exports[`<AppTextInput /> renders unchanged 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#e0e0eb",
      "borderRadius": 25,
      "flexDirection": "row",
      "marginVertical": 20,
      "padding": 10,
      "width": "100%",
    }
  }
>
  <TextInput
    allowFontScaling={true}
    rejectResponderTermination={true}
    style={
      Object {
        "color": "#000",
        "flex": 1,
        "fontFamily": "Avenir-Roman",
        "fontSize": 20,
        "marginLeft": 10,
      }
    }
    underlineColorAndroid="transparent"
  />
</View>
`;
